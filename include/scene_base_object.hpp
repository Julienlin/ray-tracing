/**
 * @file scene_base_object.hpp
 * @author Julien Lin
 * @brief This file contains the declaration of the SceneBaseObject class.
 * @version 0.1
 * @date 2020-02-09
 *
 *
 */
#ifndef __SCENE_BASE_OBJECT_H_
#define __SCENE_BASE_OBJECT_H_

#include "objet_base_surface.hpp"
#include "ray.hpp"
#include "types.hpp"
#include "utils.hpp"

/**
 * @brief This class is the mother class of each object that can appear in a scene.
 * This class defines the fundamental traits that an object must have. This class declares methods that each object has to implement.
 * @class SceneBaseObject
 */
class SceneBaseObject
{
protected:
  ObjectBaseSurface *m_surface;

  double m_reflect;
  double m_refract;
  double m_spec_reflect;
  double m_diff_reflect;
  double m_amb_reflect;
  double m_shine;

public:
  static constexpr double MIN_PROXIMITY = 1e-5;
  /**
   * @brief Construct a new Scene Base Object object with no surface trait. this constructor has been implemented in order to use std::vector.
   *
   */
  SceneBaseObject() : m_surface(nullptr){};

  /**
   * @brief Construct a new Scene Base Object object.
   *
   * @param surface Object that give the surface characteristic.
   * @param reflect The coefficent of reflection of the object.
   * @param spec_reflect The coefficient of specular reflection that determines the intensity of white dots.
   * @param diff_reflect The coefficient of diffuse reflection.
   * @param amb_reflect The ambient reflection coefficient that determine the intensity of the ambient light on the object.
   * @param shine The shininess coefficient that determine the shininess of the object.
   */
  SceneBaseObject(ObjectBaseSurface *surface, double reflect = 0, double spec_reflect = 0.5, double diff_reflect = 0.5, double amb_reflect = 0.5, double shine = 10.);

  /**
   * @brief Construct a new Scene Base Object object. This constructor is generated by the compiler.
   *
   * @param obj
   */
  SceneBaseObject(const SceneBaseObject &obj) = default;

  /**
   * @brief Construct a new Scene Base Object object. This constructor is generated by the compiler.
   *
   * @param obj
   */
  SceneBaseObject(SceneBaseObject &&obj) = default;

  /**
   * @brief Destroy the Scene Base Object object. Declared virtual in order to be able to operate some polymorphism.
   *
   */
  virtual ~SceneBaseObject(){};

  /**
   * @brief Compute the intersection distance between a ray and the object.
   *
   * Compute the intersection distance between a ray and the object. As we have a parametric description of the light we can give real t which we can determine the intersection point.
   * @param ray
   * @return double
   */
  virtual double intersecDist(const Ray &ray) = 0;

  /**
   * @brief get the normal to the surface passing by POS.
   *
   * @param pos is Either the position of the intersection or the position to where the normal has to go trhough.
   *
   * @return the normal to the surface passing by POS.
   */
  virtual vector_t getNormal(const position_t &pos) = 0;

  /**
   * @brief Get the Surface object.
   *
   * @return ObjectBaseSurface*
   */
  ObjectBaseSurface *getSurface() const;

  /**
   * @brief Get the Color object.
   *
   * @param pos
   * @return RGBColor
   */
  virtual RGBColor getColor(position_t &pos) const = 0;

  // RGBColor getColor() const;

  /**
   * @brief Get the spec reflect object
   *
   * @return double
   */
  double get_spec_reflect() const { return m_spec_reflect; }

  /**
   * @brief Get the diff reflect object
   *
   * @return double
   */
  double get_diff_reflect() const { return m_diff_reflect; }

  /**
   * @brief Get the amb reflect object
   *
   * @return double
   */
  double get_amb_reflect() const { return m_amb_reflect; }

  /**
   * @brief Get the shine object
   *
   * @return double
   */
  double get_shine() const { return m_shine; }

  /**
   * @brief Get the reflect object
   *
   * @return double
   */
  double get_reflect() const { return m_reflect; }
};

#endif // __SCENE_BASE_OBJECT_H_

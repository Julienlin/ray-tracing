/**
 * @file objet_base_surface.hpp
 * @author Julien Lin
 * @brief This contains the implementation of the ObjectBaseSurface and the SurfaceUniformedColor classes.
 * @version 0.1
 * @date 2020-02-09
 *
 */
#ifndef __OBJECT_BASE_SURFACE_H_
#define __OBJECT_BASE_SURFACE_H_

#include "types.hpp"

/**
 * @brief This class is an interface class for every class that characterize object surfaces.
 * @class ObjectBaseSurface
 */
class ObjectBaseSurface
{
public:
  /**
   * @brief Destroy the Object Base Surface object.
   *
   */
  virtual ~ObjectBaseSurface(){};

  /**
   * @brief Get the Color object.
   *
   * @param pos
   * @return RGBColor
   */
  virtual RGBColor getColor(position_t &pos) = 0;

  /**
   * @brief Get the transparancy object.
   *
   * @param pos
   * @return double
   */
  virtual double get_transparancy(position_t &pos) = 0;
};

class SurfaceUniformedColor : public ObjectBaseSurface
{
private:
  RGBColor color;

public:
  /**
   * @brief Construct a new Surface Uniformed Color object.
   *
   * @param color
   */
  SurfaceUniformedColor(RGBColor color) : color(color){};

  /**
   * @brief Construct a new Surface Uniformed Color object. This constructor is generated by the compiler.
   *
   * @param surface
   */
  SurfaceUniformedColor(const SurfaceUniformedColor &surface) = default;

  /**
   * @brief Construct a new Surface Uniformed Color object. This constructor is generated by the compiler.
   *
   * @param surface
   */
  SurfaceUniformedColor(SurfaceUniformedColor &&surface) = default;

  /**
   * @brief Destroy the Surface Uniformed Color object.
   *
   */
  virtual ~SurfaceUniformedColor(){};

  /**
   * @brief Get the Color object.
   *
   * @param pos
   * @return RGBColor
   */
  virtual RGBColor getColor(position_t &pos) { return color; }

  /**
   * @brief Get the transparancy object.
   *
   * @param pos
   * @return double
   */
  virtual double get_transparancy(position_t &pos) { return 0; }
};

#endif // __OBJECT_BASE_SURFACE_H_
